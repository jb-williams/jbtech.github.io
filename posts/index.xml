<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on jb</title>
        <link>https://jb-williams.github.io/jbtech.github.io/posts/</link>
        <description>Recent content in Posts on jb</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 17 Sep 2022 18:46:19 -0500</lastBuildDate>
        <atom:link href="https://jb-williams.github.io/jbtech.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>THM_Basic_PenTest_Walkthrough</title>
            <link>https://jb-williams.github.io/jbtech.github.io/posts/2022/09/thm_basic_pentest_walkthrough/</link>
            <pubDate>Sat, 17 Sep 2022 18:46:19 -0500</pubDate>
            
            <guid>https://jb-williams.github.io/jbtech.github.io/posts/2022/09/thm_basic_pentest_walkthrough/</guid>
            <description>Basic PenTesting Box Facilitated by TryHackMe
Performed, Written &amp;amp; Compiled by Jb Williams - @_binford - Github
Summary   Hidden directory on webserver(development, found via dirbuster&amp;amp;rockyou).
  Username (jan and kay found via enum4linux).
  Password(jan:armando found via hydra with ssh).
  Private SSH Key found with Linpeas.
  Cracked SSH Key
  Was able to login and read pass.bak
     User Pass Service SSH Key IP Port     jan armando ssh &amp;mdash;&amp;mdash;&amp;mdash;- 10.</description>
            <content type="html"><![CDATA[<h1 id="basic-pentesting-box">Basic PenTesting Box</h1>
<p>Facilitated by <a href="https://tryhackme.com/hacktivities">TryHackMe</a></p>
<p>Performed, Written &amp; Compiled by Jb Williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams">Github</a></p>
<h2 id="summary">Summary</h2>
<ul>
<li>
<p>Hidden directory on webserver(<code>development</code>, found via dirbuster&amp;rockyou).</p>
</li>
<li>
<p>Username (<code>jan</code> and <code>kay</code> found via enum4linux).</p>
</li>
<li>
<p>Password(<code>jan:armando</code> found via hydra with ssh).</p>
</li>
<li>
<p>Private SSH Key found with Linpeas.</p>
</li>
<li>
<p>Cracked SSH Key</p>
</li>
<li>
<p>Was able to login and read <code>pass.bak</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>User</th>
<th>Pass</th>
<th>Service</th>
<th>SSH Key</th>
<th>IP</th>
<th>Port</th>
</tr>
</thead>
<tbody>
<tr>
<td>jan</td>
<td>armando</td>
<td>ssh</td>
<td>&mdash;&mdash;&mdash;-</td>
<td>10.10.62.206</td>
<td>22</td>
</tr>
<tr>
<td>kay</td>
<td>beeswax</td>
<td>ssh</td>
<td>kay_id_rsa</td>
<td>10.10.62.206</td>
<td>22</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Ports</th>
<th>Services</th>
</tr>
</thead>
<tbody>
<tr>
<td>22</td>
<td>SSH 7.2</td>
</tr>
<tr>
<td>80</td>
<td>Apache 2.4.18</td>
</tr>
<tr>
<td>139</td>
<td>SMB 3.X -4.X</td>
</tr>
<tr>
<td>445</td>
<td>SMB 4.3.11</td>
</tr>
<tr>
<td>8009</td>
<td>Apache Jserv 1.3</td>
</tr>
<tr>
<td>8080</td>
<td>Apache tomcat 9.0.7</td>
</tr>
</tbody>
</table>
<h2 id="scanning--enumeration">Scanning &amp; Enumeration</h2>
<ul>
<li>Scanned Machine on the network:</li>
</ul>
<p><strong>IP:</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">10.10.62.206
</code></pre></div><ul>
<li>Discovered these ports and services running on the device.</li>
</ul>
<p><strong>Ports:</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#ae81ff">22</span> - ssh 7.2
<span style="color:#ae81ff">80</span> - apache 2.4.18
<span style="color:#ae81ff">139</span> - SMB 3.X - 4.X
<span style="color:#ae81ff">445</span> - SMB 4.3.11
8009- Apache Jserv 1.3
<span style="color:#ae81ff">8080</span> Apache tomcat 9.0.7
</code></pre></div><ul>
<li>
<p>Began enumeration on the webpage on port 80 with Dirbuster:</p>
</li>
<li>
<p>Discovered:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/development/*

/development/dev.txt

/development/j.txt
</code></pre></div><ul>
<li>
<p><code>/development/dev.txt</code> talks about <code>Apache Struts 2.5.12</code>, as well as initials of what I assume are employees:</p>
<ul>
<li>Found initials: <code>-K</code> and <code>-J</code></li>
</ul>
</li>
<li>
<p>In <code>/development/j.txt</code>, found a message that was from <code>K</code> is telling <code>J</code> that they have a weak password that can be cracked easily.</p>
</li>
</ul>
<h2 id="brute-forcing">Brute Forcing</h2>
<ul>
<li>Ran enum4linux on the target IP, splitting the output to STDOUT and a file:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">enum4linux -a 10.10.62.206 | tee -a enum4linux.log
</code></pre></div><ul>
<li>
<p>Enum4linux found the full usernames <code>Kay</code> and <code>Jan</code>:</p>
</li>
<li>
<p>Bruteforced ssh to find <code>Jan's</code> password:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hydra -l jan -P /usr/share/wordlist/rockyou.txt ssh://10.10.62.206
</code></pre></div><ul>
<li>Credentials that were Found:</li>
</ul>
<table>
<thead>
<tr>
<th>User</th>
<th>Pass</th>
<th>Service</th>
<th>IP</th>
<th>Port</th>
</tr>
</thead>
<tbody>
<tr>
<td>jan</td>
<td>armando</td>
<td>ssh</td>
<td>10.10.62.206</td>
<td>22</td>
</tr>
</tbody>
</table>
<ul>
<li>Verified login credentials.</li>
</ul>
<h2 id="internal-enumeration">Internal Enumeration</h2>
<ul>
<li>
<p>Logged into <code>jan</code>&rsquo;s  account through ssh.</p>
</li>
<li>
<p>I was able to move traverse over to <code>/home/kay</code>, and say there was a <code>pass.bak</code> file</p>
</li>
<li>
<p>However, I was unable to read anything in <code>/home/kay</code>.</p>
</li>
<li>
<p>From my host, I used ssh to transfer Linpeas to the Machine into the shared memory:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">scp /opt/linpeas/linpeas.sh jan@10.10.62:/dev/shm

ssh jan@10.10.62.206

chmod +x linpeas.sh <span style="color:#f92672">&amp;&amp;</span> ./linpeas.sh | tee linlog.txt
</code></pre></div><ul>
<li>This enumeration brought me to Kay&rsquo;s Private SSH key that I was able to read.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/home/kay/.ssh/id_rsa
</code></pre></div><ul>
<li>I copied to my host and changed the permissions on it.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">chmod <span style="color:#ae81ff">600</span> kay_id_rsa
</code></pre></div><ul>
<li>Discovered the SSH Key was password protected, so I sent it to <code>ssh2john</code>, out put it into a text doc to then run <code>john</code> on it.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python3 /usr/share/john/ssh2john.py kay_id_rsa &gt; forjohn.txt

john forjohn.txt
</code></pre></div><ul>
<li>
<p>John found <code>kay's</code> password: <code>beeswax</code></p>
</li>
<li>
<p>SSH&rsquo;d into the machine as <code>Kay</code>:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh -i kay_id_rsa kay@10.10.62.206
beeswax
</code></pre></div><table>
<thead>
<tr>
<th>User</th>
<th>Pass</th>
<th>Service</th>
<th>SSH Key</th>
<th>IP</th>
<th>Port</th>
</tr>
</thead>
<tbody>
<tr>
<td>kay</td>
<td>beeswax</td>
<td>ssh</td>
<td>kay_id_rsa</td>
<td>10.10.62.206</td>
<td>22</td>
</tr>
</tbody>
</table>
<ul>
<li>As <code>Kay</code> I was able to read that <code>pass.bak</code> file:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat pass.bak
</code></pre></div><ul>
<li>With that I was able to find the Password/Last Flag:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">heresareallystrongpasswordthatfollowsthepasswordpolicy$$
</code></pre></div><h1 id="heading"></h1>
<p>performed, written &amp; compiled by jb williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams">github</a></p>
]]></content>
        </item>
        
        <item>
            <title>GPG</title>
            <link>https://jb-williams.github.io/jbtech.github.io/posts/2022/08/gpg/</link>
            <pubDate>Wed, 31 Aug 2022 17:54:28 -0500</pubDate>
            
            <guid>https://jb-williams.github.io/jbtech.github.io/posts/2022/08/gpg/</guid>
            <description>GPG Written &amp;amp; Compiled by Jb Williams - @_binford - Github
 GPG(GnuPrivacyGuard) is an Open Source implementation of PGP(PrettyGoodPrivacy). It allows you to encrypt/decrypt and sign data communications.
A quick walkthrough of GPG.
Works on most all OS&amp;rsquo;s, this will be a Linux, and quick Windows walkthrough.
Public/Private Keys:
 You make a Public Key and a Private Key(always keep Private Key safe and do not share with anyone). You give you Public Key out to anyone.</description>
            <content type="html"><![CDATA[<h1 id="gpg">GPG</h1>
<p>Written &amp; Compiled by Jb Williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams/Bash_Projects/tree/main/GPG">Github</a></p>
<h1 id="heading"></h1>
<p>GPG(GnuPrivacyGuard) is an Open Source implementation of PGP(PrettyGoodPrivacy). It allows you to encrypt/decrypt and sign data communications.</p>
<p>A quick walkthrough  of GPG.</p>
<p>Works on most all OS&rsquo;s, this will be a Linux, and quick Windows walkthrough.</p>
<p>Public/Private Keys:</p>
<ul>
<li>You make a Public Key and a Private Key(always keep Private Key safe and do not share with anyone).</li>
<li>You give you Public Key out to anyone.</li>
<li>They use your Public Key to encrypt the message they want to send to you and you decrypt it with your Private Key.</li>
<li>You use their Public Key to encrypt a message you want to send to them and they decrypt it with their Private Key Calculating Key Counts based off of # of People Employees.</li>
<li>Symmetric Key count:
<ul>
<li>(N*(N-1))/2 = count of symmetric keys     - N = num of individuals</li>
</ul>
</li>
<li>Asymmetric Key Count:
<ul>
<li>N*2  \</li>
</ul>
<h1 id="heading-1"></h1>
</li>
</ul>
<h1 id="heading-2"></h1>
<h1 id="linux">Linux</h1>
<h2 id="step-1-create-a-key-pair">Step 1 Create a Key Pair</h2>
<p>  The first step in using asymmetric encryption is to generate a key pair. We will be using Charles and Jack as example people.</p>
<ul>
<li>To create a Public/Private Key, Charles will enter the following command:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --full-gen-key
</code></pre></div><ul>
<li>
<p>Next, Charles will be asked to enter the following info:</p>
<ul>
<li>
<p>Real Name:        What the user will name their key. We will use Charles.</p>
</li>
<li>
<p>Email Address:    Email associated with the key. We will use <a href="mailto:charles@email.com">charles@email.com</a>.</p>
</li>
<li>
<p><code>Change (N)ame, (E)mail, or (O)kay/(Q)uit?:</code> Enter <code>O</code> to confirm your information.</p>
</li>
<li>
<p>Passphrase:       A password for the encryption key. Anytime Private Key is used, passphrase will be verified:</p>
<ul>
<li>Select any passphrase, just make sure to remember it for later use.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Example Output:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg: key D81710193A5FC56A marked as ultimately trusted
gpg: directory <span style="color:#e6db74">&#39;/home/charles/.gnupg/openpgp-revocs.d&#39;</span> created
gpg: revocation certificate stored as <span style="color:#e6db74">&#39;/home/charles/.gnupg/openpgp-revocs.d/C4A3CFC-
</span><span style="color:#e6db74">51a
</span><span style="color:#e6db74">B1318FFD4D2C291D81710193A5FC56A.rev&#39;</span>
public and secret key created and signed
</code></pre></div><ul>
<li>To verify the keys were created you can use this command:(returns all keys in Charles' keyring.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --list-keys
</code></pre></div><ul>
<li>Example Output:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/home/charles/.gnupg/pubring.kbx
-----------------------------------
pub   rsa3072 2019-12-11 <span style="color:#f92672">[</span>SC<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>expires: 2021-12-10<span style="color:#f92672">]</span>
C4A3CFC51B1318FFD4D2C291D81710193A5FC56A
uid           <span style="color:#f92672">[</span>ultimate<span style="color:#f92672">]</span> charles &lt;charles@email.com&gt;
sub   rsa3072 2019-12-11 <span style="color:#f92672">[</span>E<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>expires: 2021-12-10<span style="color:#f92672">]</span>
</code></pre></div><h2 id="step-2-exporting-and-importing-keys">Step 2: Exporting and Importing Keys</h2>
<p>  The person sending a message needs the receiver&rsquo;s Public Key to encrypt the message for them. Charles will need to export his Public Key to make it Public, so others like Jack can use it.</p>
<ul>
<li>
<p>Exporting puts the Public Key in a format that can be shared and used to encrypt.</p>
</li>
<li>
<p>Charles would use the following command to export his Public Key:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --armor --output charles.gpg --export charles@email.com
</code></pre></div><ul>
<li>
<p><code>gpg</code>: The command to run GPG.</p>
</li>
<li>
<p><code>--armor</code>: Puts the key in an ASCII format.</p>
</li>
<li>
<p><code>--output charles.gpg</code>: Creates the Public Key in an accessible format. In this case, we named the key <code>charles.gpg</code>.</p>
</li>
<li>
<p><code>--export charles@email.com</code>: References which key to use from the key ring. It is referenced by the email.</p>
</li>
<li>
<p>To view the exported key, in the folder you exported it:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat charles.gpg
</code></pre></div><p>Example Output(shortened):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">-----BEGIN PGP PUBLIC KEY BLOCK-----

oCN2AghQUDgu5yBVAmPAx7hatvcMBR1X6NqJN4wStLB21OvHdgT2VbiHUtwkGvbJ
Hsui9eTR7bBY1YgP8PcGFjeMZ5+C7E94uYeksbwMzFWGE79M3kqEi1tgkDZTN/T8
8O31qQUgDCCbUnuvpW5pYJ2BconeNBHAZNKSKg+9U3DfCazRpky89be6W7WtjDGs
iFo5PEjBTvCJJXHvDgn2W7I7U0MWO220gyCT/Ja/eKad5GKTeMjOC4ERTwvha0ON 
-----END PGP PUBLIC KEY BLOCK-----
</code></pre></div><ul>
<li>Now, Charles can either put this Public Key on his website, and/or share it directly with someone. ie:<code>Jack</code></li>
</ul>
<p>  Here are the steps that Jack needs to take.</p>
<ul>
<li>After Jack saves the key he will need to import it into the keyring.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --import charles.gpg
</code></pre></div><ul>
<li>Confirm it was imported by listing the keys.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --list-keys
</code></pre></div><ul>
<li>This should show Jack&rsquo;s addition of Charles' key (Jack has not created any keys yet).</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pub   rsa3072 2019-12-03 <span style="color:#f92672">[</span>SC<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>expires: 2021-12-02<span style="color:#f92672">]</span>
39B2BD6C93E1E63E8C004183FE91AF7A7B4EC267
uid   <span style="color:#f92672">[</span>ultimate<span style="color:#f92672">]</span> Charles &lt;charles@email.com&gt;
sub   rsa3072 2019-12-03 <span style="color:#f92672">[</span>E<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>expires: 2021-12-02<span style="color:#f92672">]</span>
</code></pre></div><h2 id="step-3-encryption">Step 3: Encryption</h2>
<p>  Jake now has Charles' Public Key in his key ring, so he is ready to create a message and encrypt it.</p>
<ul>
<li>Jake will want to create a file that will contain a message, so we&rsquo;ll use the following echo command to create a file called <code>Jacks_plainmessage.txt</code>.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">echo <span style="color:#e6db74">&#34;Hi Charles, my bank account number is 2783492&#34;</span> &gt; Jacks_plainmessage.txt
</code></pre></div><ul>
<li>
<p>The next step is to use Charles' Public Key to encrypt <code>Jacks_plainmessage.txt</code>.</p>
</li>
<li>
<p>We will use the following command:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --armor --output Jacks_encryptedmessage.txt --encrypt --recipient /
charles@email.com Jacks_plainmessage.txt
</code></pre></div><ul>
<li>
<p><code>gpg</code>: The command to run GPG.</p>
</li>
<li>
<p><code>--armor</code>: Puts the encrypted message in an ASCII format.</p>
</li>
<li>
<p><code>--output Jacks_encryptedmessage.txt</code>: Command for the output file, which creates the name of the encrypted file.</p>
</li>
<li>
<p><code>--encrypt</code>: Tells GPG to encrypt.</p>
</li>
<li>
<p><code>--recipient charles@email.com</code>: Tells GPG which Public Key to use, based on the email address of the key.</p>
</li>
<li>
<p><code>Jacks_plainmessage.txt</code>: Specifies for GPG which plaintext file to encrypt.</p>
</li>
<li>
<p>Run the command to created a file that has ciphertext called <code>Jacks_encryptedmessage.txt</code>.</p>
</li>
<li>
<p>Run a preview command to illustrate the file has now been encrypted:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat Jacks_encryptedmessage.txt
</code></pre></div><ul>
<li>The encrypted message should look like the following:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">-----BEGIN PGP MESSAGE-----

hQGMA1p4Le4c2oCaAQv+MT2ghzg9RYymSIxnbwe41LpOPx76mA9f6mQYZO77c/Ij
u14kEgfaVM9PxxBw8KpEkg5NvmBVPAfxFbFrcLoKB8lVW8MTpp3mQ8r0257PNORK
bQOC+HHktQN3AJrsgN/Oj4OduM+hMtnPUdWa0X7uOOKRFW9r5CbuYga134EzoHG3

-----END PGP MESSAGE-----
</code></pre></div><h2 id="step-4-decryption">Step 4: Decryption</h2>
<p>  The last step is for Jack to send his encrypted message over to Charles, so she can decrypt it with her Private Key.</p>
<ul>
<li>
<p>Once Charles receives Jack&rsquo;s encrypted message, she will save it in a directory and then run decryption commands against the file.</p>
</li>
<li>
<p>The command that Charles will use to decrypt Jack&rsquo;s encrypted message is:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --output Jacks_decrypted_message --decrypt Jacks_encryptedmessage.txt
</code></pre></div><ul>
<li>
<p><code>gpg</code>: The command to run gpg.</p>
</li>
<li>
<p><code>--output Jacks_decrypted_message</code>: This creates an output file, which is the decrypted message.</p>
</li>
<li>
<p><code>--decrypt Jacks_encryptedmessage.txt</code>: This is indicating to decrypt and what file to decrypt.</p>
</li>
<li>
<p>Run the command. It just decrypted Jack&rsquo;s message and placed the results into a file called <code>Jacks_decrypted_message</code>.</p>
</li>
<li>
<p>Preview the decrypted file by running:</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat Jacks_decrypted_message
</code></pre></div><ul>
<li>This shows that now Charles can see Jack&rsquo;s plaintext message:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#e6db74">&#34;Hi Charles, my bank account number is 2783492.&#34;</span>
</code></pre></div><h2 id="signing">Signing</h2>
<p>  Signing with GPG gives the ability to verify that a file came from you or a specific person.<br>
You can verify signature before extracting the data.</p>
<p>Signing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --sign text.txt
</code></pre></div><p>Verifying:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --verify text.txt.gpg
</code></pre></div><p>You can also have a detached signature file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --detach-sign text.txt
</code></pre></div><p>  Then, you need to have both <code>text.txt</code> and <code>text.txt.sig</code> in the same directory and verify the signature with <code>gpg --verify text.txt.sig</code>.<br>
This part was just a quick overview of the signing.</p>
<h1 id="windows">Windows</h1>
<h2 id="step-1-setup">Step 1: Setup</h2>
<p>  Download and Install  <a href="https://www.gpg4win.org">GPG4Win</a>, then run Kleopatra after the Install Wizard is done. You will come to this screen.</p>

    <img src="/img/kleostart.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<h2 id="step-2-generating-key-pairs">Step 2: Generating Key Pairs</h2>
<ul>
<li>Then, in Kleopatra, Navigate to:
<ul>
<li>File -&gt; New Key Pair</li>
<li>(this walkthrough) We will be working with the OpenPGP key pairs.</li>
</ul>
</li>
</ul>

    <img src="/img/kleonewpair.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<h1 id="heading-3"></h1>
<h1 id="heading-4"></h1>
<ul>
<li>Now it will ask you to enter your Name and Email, your Identifiers. I would also suggest protecting the generated key with a passphrase. Enter the desired information.</li>
<li>Click <code>Advanced Settings</code>, this is where you select your encryption type as well as desired usage like Signing, Authentication, and Expiration Date</li>
<li>We will use <code>RSA</code> for this quick tutorial.</li>
<li>The <code>2048 bits</code> is the default encryption strength, I suggest using the max number of bits offered. For me <code>4096 bits</code>. Click <code>Ok</code>.</li>
<li>When everything is set right click <code>Create</code>.</li>
</ul>

    <img src="/img/kleoadvset.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>Then enter your desired passphrase for your new key pair.</li>
<li>Then it will generate the key pair, and depending on your computer the completion time may vary. After it Generates you should see this window.</li>
</ul>

    <img src="/img/kleogensuc.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>Then clicking <code>Finish</code>, you should be able to see your key now listed in Kleopatra.</li>
</ul>

    <img src="/img/kleofirstlist.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<h2 id="step-3-exporting-public-keys">Step 3: Exporting Public Keys</h2>
<p><em>Public Key</em></p>
<ul>
<li>For this to function properly, you will need to Export your Public Key so others can get it and encrypt files/messages for you.</li>
<li>To do this we will <code>Right Click</code> on your key you just created and click <code>Export</code>:
<ul>
<li>Then you may rename it as you wish, I tend to use my Name Identifier and public like <code>johnSmith_public</code>.</li>
<li>The save window will already have it set to the <code>.gpg</code> file extension.</li>
<li>Then save it somewhere you can easily access(Desktop, Documents).</li>
</ul>
</li>
</ul>
<h2 id="step-4-importing-public-keys">Step 4: Importing Public Keys</h2>
<ul>
<li>Find the Recipients Public Key, and you can copy the contents to a new text file.</li>
<li>Open Kleopatra, and on the top action bar there is an <code>Import</code> button. Click it then navigate to that text file you just created and <code>Open</code> it.</li>
<li><strong>NOTE</strong> You may have to set the dropdown right above the <code>Open</code> button to <code>Any files</code>.</li>
<li>There should now be an <code>Imported Certificates</code> tab next to the <code>All Certificates</code> tab.</li>
</ul>

    <img src="/img/kleopubimport.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<h2 id="step-5-encrypting-data">Step 5: Encrypting Data</h2>
<ul>
<li>To Encrypt data, one way is:
<ul>
<li>Open the text you are wanting to encrypt.</li>
<li>Select it all and then Copy it to the clipboard(Ctrl+c, or right-click and select <code>Copy</code>).</li>
<li>Then go over to your icon tray area. It is likely on the bottom of the screen, I&rsquo;ve set mine to the top of the screen.</li>
<li>Right Click on the Kleopatra Icon in the tray.</li>
<li>Got to the <code>Clipboard</code> selection then select <code>Encrypt</code>:</li>
</ul>
</li>
</ul>

    <img src="/img/kleoencr.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>Once it is encrypted, it gets sent back to your clipboard.</li>
<li>Paste your newly encrypted text into a document, save and send to the recipient.</li>
</ul>

    <img src="/img/kleoencrmess.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<h2 id="step-6-decrypting-data">Step 6: Decrypting Data</h2>
<ul>
<li>Open the encrypted file sent to you into a document:
<ul>
<li>Select all of the text and Copy it into your clipboard.</li>
<li>Go back to the icon tray, right click on the Kleopatra Icon, navigate to <code>Clipboard</code> and select <code>Decrypt/Verify</code>.</li>
</ul>
</li>
</ul>

    <img src="/img/kleodecrmess.PNG"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>Decrypted text will be in your clipboard.</li>
<li>Open a document and Paste the Decrypted text into that document.</li>
</ul>
<h1 id="linksreferences">Links/References</h1>
<p><em>Twitter</em> - <a href="https://twitter.com/_binford">@_binford</a></p>
<h2 id="my-simple-programs">My Simple Programs</h2>
<p>Some simple encrypt/decrypt/signing programs I made.</p>
<p><a href="https://github.com/jb-williams/Bash_Projects/tree/main/GPG">Github</a></p>
<h2 id="common-gui-apps">Common GUI Apps</h2>
<p><a href="https://www.gnupg.org/related_software/gpa/">gpa</a> - Linux</p>
<p><a href="https://apps.kde.org/kleopatra/">Kleopatra</a> - Linux</p>
<h2 id="gpg-gui-for-windows">GPG GUI for Windows</h2>
<p><a href="https://www.gpg4win.org">gpg4win</a> - Windows(gpg4win comes with Kleopatra)</p>
<h2 id="good-gui-video-tutorial">Good GUI Video Tutorial</h2>
<p><a href="https://www.youtube.com/watch?v=CEADq-B8KtI">HackerSploit</a> - YouTube</p>
]]></content>
        </item>
        
        <item>
            <title>My_Usb_Encrypton_Process</title>
            <link>https://jb-williams.github.io/jbtech.github.io/posts/2022/08/my_usb_encrypton_process/</link>
            <pubDate>Fri, 26 Aug 2022 16:43:11 -0500</pubDate>
            
            <guid>https://jb-williams.github.io/jbtech.github.io/posts/2022/08/my_usb_encrypton_process/</guid>
            <description>LUKS USB Encryption for Linux Tutorial Written &amp;amp; Compiled by Jb Williams - @_binford - Github
This is the process I use to partition and encrypt usb drives.
 I have not tested tested it on anything other than usb&amp;rsquo;s, though a similar process would potentially work.  !! Notice !! Running these commands on the wrong drive could Erase All Data on that Drive!!
 Only Recoverable if You Had a Backup Make sure you know:  Device Name(ie: /dev/sdb) Device Size(ie: 15GiB)    Reqs:</description>
            <content type="html"><![CDATA[<h1 id="luks-usb-encryption-for-linux">LUKS USB Encryption for Linux</h1>
<p>Tutorial Written &amp; Compiled by Jb Williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams">Github</a></p>
<p>This is the process I use to partition and encrypt usb drives.</p>
<ul>
<li>I have not tested tested it on anything other than usb&rsquo;s, though a similar process would potentially work.</li>
</ul>
<p><strong>!! Notice !!</strong>
<strong>Running these commands on the wrong drive could Erase All Data on that Drive!!</strong></p>
<ul>
<li>Only Recoverable if You Had a Backup</li>
<li>Make sure you know:
<ul>
<li>Device Name(ie: /dev/sdb)</li>
<li>Device Size(ie: 15GiB)</li>
</ul>
</li>
</ul>
<p><strong>Reqs:</strong></p>
<ul>
<li>linux</li>
<li>cryptsetup    (deb package)</li>
</ul>
<p><strong>(depending on desired file system)</strong>\</p>
<ul>
<li>
<p>dosfstools - FAT32, vfat <em>(can be read by both Windows and Linux)</em></p>
</li>
<li>
<p>ntfs-3g    - NTFS, ntfs <em>(Windows)</em></p>
</li>
<li>
<p>(standard on linux) - EXT4, ext4 <em>(Linux)</em></p>
</li>
<li>
<p>I use the package <code>udiskie</code> to mount and dismount the drive.</p>
</li>
</ul>
<h3 id="step-1">Step 1</h3>
<ul>
<li>(Surprise) Insert the usb</li>
<li>Find the desired device name for the usb</li>
<li><em>For this walkthrough we are goinig to assume that the Computer Hard Drive is /dev/sda, the desired USB is /dev/sdb from here out</em><br>
<code>/dev/sda</code> - computer<br>
<code>/dev/sdb</code> - usb\</li>
</ul>
<p>to find device name:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsblk
</code></pre></div><p><em>example output</em>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> disk 
|-sda1   8:1    <span style="color:#ae81ff">0</span>   100M  <span style="color:#ae81ff">0</span> part /boot
|-sda2   8:2    <span style="color:#ae81ff">0</span>    53G  <span style="color:#ae81ff">0</span> part /
|-sda3   8:3    <span style="color:#ae81ff">0</span>   293G  <span style="color:#ae81ff">0</span> part /home
|-sda7   8:4    <span style="color:#ae81ff">0</span>     4G  <span style="color:#ae81ff">0</span> part <span style="color:#f92672">[</span>SWAP<span style="color:#f92672">]</span>
|-sda5   8:5    <span style="color:#ae81ff">0</span>    30G  <span style="color:#ae81ff">0</span> part /tmp
|-sda6   8:6    <span style="color:#ae81ff">0</span>    30G  <span style="color:#ae81ff">0</span> part /var
sdb      8:12   <span style="color:#ae81ff">1</span>  14.7G  <span style="color:#ae81ff">0</span> disk 
|-sdb1   8:13   <span style="color:#ae81ff">1</span>     4G  <span style="color:#ae81ff">0</span> part 
<span style="color:#e6db74">`</span>-sdb2   8:14   <span style="color:#ae81ff">1</span>  10.5G  <span style="color:#ae81ff">0</span> part
</code></pre></div><ul>
<li>Then, if you wish you can switch user to <em>root</em>, we will be here. Also make double-check that the device is unmounted.<br>
Remember USB is /dev/sdb.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">su - <span style="color:#f92672">&amp;&amp;</span> umount /dev/sdb
</code></pre></div><ul>
<li>Next, before we partition and encrypt the drive, we will &ldquo;shred&rdquo; the data on the usb. This writes over the data that exists on it in an attempt destroy any recoverable data. It can be done a specified number of times.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">shred -v -n <span style="color:#ae81ff">1</span> /dev/sdb
</code></pre></div><p>Where &ldquo;-v&rdquo; is verbose so you can monitor the progress, and &ldquo;-n 1&rdquo; is the number of iterations or number of times it should be overwitten. I have read anywhere between 1-7 is ok.</p>
<h3 id="step-2">Step 2</h3>
<p>At this point the data is clear on the usb and we will start partitioning and formatting the device. During this part you can create several partitions and encrypt and format then as you prefer.</p>
<p>I will will go through this using <em>fdisk</em> and use the all the available space.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fdisk /dev/sdb
</code></pre></div><ul>
<li>&ldquo;o&rdquo; for DOS disklabel</li>
<li>&ldquo;n&rdquo; to create new partition</li>
<li>&ldquo;p&rdquo; set it as primary</li>
<li>Use the Full Disk Sectors, would usually be the default if no sizes are specified</li>
<li>&ldquo;w&rdquo; will write the changes</li>
</ul>
<p>Now we are ready to begin encrypting the usb with <em>cryptsetup</em> and give it the name &ldquo;ENCRYPTED&rdquo;.</p>
<ul>
<li>if the following commands don&rsquo;t properly name the drive. after it&rsquo;s open you can open another terminal and either do <code>lsblk</code> to find the name of the drive, or <code>ls /dev/mapper/</code> and find the correct one.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cryptsetup luksOpen /dev/sdb1 &lt;desired_drive_name&gt;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cryptsetup luksOpen /dev/sdb1 ENCRYPTED
</code></pre></div><ul>
<li>
<p>It will ask for a Passphrase, make sure it is a strong complex passphrase.</p>
</li>
<li>
<p>Now choose the format that best suits your needs. If you intend to use the device on GNU/Linux and Windows alike, you should opt for <code>FAT32</code> (<code>mkfs.vfat</code> command, required to have the <code>dosfstools</code> package installed) or <code>NTFS</code> (<code>mkfs.ntfs</code> command, required to have the <code>ntfs-3g</code> package installed). If you use only on machines with GNU/Linux, <code>EXT4</code> (command <code>mkfs.ext4</code>) will be a good choice.</p>
</li>
<li>
<p>The <code>-L</code> and <code>-n</code> options are used to provide a recognizable name to the unit. In this example we will use in the <code>NAME ENCRYPTED</code>.</p>
</li>
</ul>
<p>To format as EXT4:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkfs.ext4 /dev/mapper/LUKS0001 -L ENCRYPTED
</code></pre></div><p>To format as FAT32:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkfs.vfat /dev/mapper/LUKS0001 -n ENCRYPTED
</code></pre></div><p>To format as NTFS:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkfs.ntfs /dev/mapper/LUKS0001 -L ENCRYPTED
</code></pre></div><p>Finally, close the partition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cryptsetup luksClose &lt;desired_drive_name&gt;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cryptsetup luksClose /dev/sdb1 ENCRYPTED
</code></pre></div><p>Now it is fine to get back to the regular user.</p>
<h3 id="step-3">Step 3</h3>
<p>Interacting with the drive through command-line.</p>
<ul>
<li>To open and mount the encrypted drive from the command line.</li>
<li>best practice to run <code>lsblk</code> again to check device name.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">udiskie-mount /dev/sdb1 <span style="color:#f92672">&amp;&amp;</span> udiskie-mount /dev/mapper/&lt;encrypted_dev_name&gt;
</code></pre></div><p>Then to unmount you just:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">udiskie-umount /dev/mapper/&lt;encrypted_dev_name&gt;
</code></pre></div><ul>
<li>If it was just and un-encrypted drive the commands would just be:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">udiskie-mount /dev/sdb1
udiskie-umount /dev/sdb1
</code></pre></div><p><em>written &amp; compiled by: jb williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams">github</a></em></p>
]]></content>
        </item>
        
        <item>
            <title>Brightxf</title>
            <link>https://jb-williams.github.io/jbtech.github.io/posts/2022/08/brightxf/</link>
            <pubDate>Fri, 26 Aug 2022 11:59:26 -0500</pubDate>
            
            <guid>https://jb-williams.github.io/jbtech.github.io/posts/2022/08/brightxf/</guid>
            <description>Brightxf Written &amp;amp; Compiled by Jb Williams - @_binford - Github
  !! Run at Own Risk !!
 No issues have come from my use of these but that doesn&amp;rsquo;t mean there won&amp;rsquo;t be   I enjoy making/finding the most minimal gui and still be functional as a daily-driver(functional specifically to my needs). I tend to prefer cwm, a simple window manager, and sxhkd, used as a hot-key daemon, and I test my setup on several different laptops of different specs.</description>
            <content type="html"><![CDATA[<h3 id="brightxf">Brightxf</h3>
<p>Written &amp; Compiled by Jb Williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams/brightxf">Github</a></p>
<h1 id="heading"></h1>
<p> <strong>!! Run at Own Risk !!</strong></p>
<ul>
<li>No issues have come from my use of these but that doesn&rsquo;t mean there won&rsquo;t be</li>
</ul>
<p> I enjoy making/finding the most minimal gui and still be functional as a daily-driver(functional specifically to my needs). I tend to prefer cwm, a simple window manager, and sxhkd, used as a hot-key daemon, and I test my setup on several different laptops of different specs.<br>
 I have major issues getting all my &ldquo;Fn&rdquo;+ F1-12 keys to work properly across all my devices and just can&rsquo;t seem to wrap my head around any explanation I&rsquo;ve come across(very likely just me). So, I put together these series of scripts and a systemd service file to specifically give both easy terminal control of your screen brightness as well as easily assigning hot-keys with sxhkd.</p>
<ul>
<li>
<p>Copy these somewhere in your PATH:</p>
<ul>
<li>brcur - current brightness</li>
<li>brwn  - brightness down</li>
<li>brup  - brightness up</li>
<li>brmx  - set brightness to max</li>
<li>brightxf - main script</li>
</ul>
</li>
<li>
<p>As sudo(root), make a directory <em>/etc/startup</em> and copy <em>brightness_mod.sh</em> there.</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo mkdir -p /etc/startup <span style="color:#f92672">&amp;&amp;</span> sudo cp /path/to/brightness_mod.sh /etc/startup
</code></pre></div><ul>
<li>Also as sudo(root), and copy <em>brightness_mod.service</em> to <em>/etc/systemd/system/</em> .</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo cp /path/to/brightness_mod.service /etc/systemd/system/
</code></pre></div><ul>
<li>Then run:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo systemctl enable brightness_mod.service <span style="color:#f92672">&amp;&amp;</span> sudo systemctl daemon-reload
</code></pre></div><ul>
<li>I also believe, with how I&rsquo;ve set it up, it needs a reboot.</li>
</ul>
<p>Then the commands are:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">brcur
brwn
brup
brmx
</code></pre></div><h1 id="heading-1"></h1>
<p><a href="https://github.com/jb-williams/brightxf">SourceCode</a></p>
<p><em>written &amp; compiled by: jb williams - <a href="https://twitter.com/_binford">@_binford</a> - <a href="https://github.com/jb-williams">github</a></em></p>
]]></content>
        </item>
        
    </channel>
</rss>
